

/* Create Mgmt schema */

CREATE SCHEMA Mgmt
    AUTHORIZATION myuser;



/* Create Organisation Table */

CREATE TABLE Mgmt.Organisation
(
  Organisation_ID integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  Company_Name varchar(200) DEFAULT 'MISSING' NOT NULL,
  Company_Identifier varchar(200) DEFAULT 'MISSING' NOT NULL,
  Parent_Organisation_ID integer DEFAULT 1 NOT NULL,
  Inherit_Flg boolean DEFAULT FALSE NOT NULL,
  Created_By_User_ID bigint DEFAULT 1 NOT NULL,
  Created_Date timestamp DEFAULT NOW() NOT NULL,
  Is_Current boolean DEFAULT TRUE,
  Updated_by_User_ID bigint DEFAULT 1,
  Updated_Date timestamp DEFAULT '9999-12-31 23:59:59' ,
  DB_Created_Date     	TIMESTAMP WITH TIME ZONE  NULL  DEFAULT  NOW(),
  DB_Created_By        	VARCHAR(255)              NULL	DEFAULT  Current_User,
  DB_Is_Deleted         BOOLEAN                   NULL 	DEFAULT  FALSE,
  DB_Last_Updated_Date  TIMESTAMP WITH TIME ZONE  NULL 	DEFAULT  NOW(),
  DB_Last_Updated_By   	VARCHAR(255)              NULL 	DEFAULT  Current_User,
  Constraint "Organisation_ID" PRIMARY KEY (Organisation_ID)
 )
;


ALTER TABLE Mgmt.Organisation ADD CONSTRAINT FK_Organisation__Organisation
  FOREIGN KEY (Parent_Organisation_ID) REFERENCES Mgmt.Organisation (Organisation_ID);


COMMENT ON TABLE Mgmt.Organisation IS E'Client organisational structure. \n\nNeeds 3 default skeleton records: \n\n1 = Missing\n2 = Public\n3 = Ultimate Parent\n\nSelf-referencing to allow for a hierarchy to be defined. \n\nInherit_Flg specifies where permissions should be inheritied - i.e. a user with the permissions in #3 will have the same permission in all lower strata of the org. \n\nTherefore there may be 2 parent-child relations coded - where Inherit = True and Inherit = False\n';
COMMENT ON COLUMN Mgmt.Organisation.Inherit_Flg IS E'Default = False - i.e. do NOT inherit';


INSERT INTO Mgmt.Organisation(company_name, parent_organisation_id, inherit_flg)
	VALUES  ('Ultimate-Parent', 1, False),
	        ('Sub-Co', 1, False);

CREATE UNIQUE INDEX IX_OrgName_Current on Mgmt.Organisation (Company_Name) WHERE Is_Current = TRUE;







CREATE OR REPLACE PROCEDURE Mgmt.sp_AddU_organisation(
  p_company_name varchar,
  p_user_name varchar,
  p_inherit_flg boolean,
  p_company_identifier varchar DEFAULT NULL,
  p_parent_company_name varchar DEFAULT NULL,
  p_update boolean DEFAULT FALSE
)
LANGUAGE plpgsql
AS $BODY$
	DECLARE
	  v_user_id bigint;
	  v_parent_organisation_id integer;
	BEGIN
	  -- Get the user ID
	  SELECT App_User_ID INTO v_user_id
	  FROM Mgmt.App_User
	  WHERE User_Name = p_user_name AND Is_Current = TRUE AND DB_Is_Deleted = FALSE;
	
		  IF NOT FOUND THEN
		    RAISE EXCEPTION 'User % not found', p_user_name;
		  END IF;
	
	  -- Get the parent organisation ID if parent company name is provided
		  	IF p_parent_company_name IS NOT NULL THEN
			    SELECT Organisation_ID INTO v_parent_organisation_id
			    FROM Mgmt.Organisation
			    WHERE Company_Name = p_parent_company_name AND Is_Current = TRUE AND DB_Is_Deleted = FALSE;
		
				    IF NOT FOUND THEN
				      RAISE EXCEPTION 'Parent company % not found', p_parent_company_name;
				    END IF;
	  		ELSE
	    	v_parent_organisation_id := NULL;
	  		END IF;
	
	  -- Check if the company already exists
	  IF EXISTS (SELECT 1 FROM Mgmt.Organisation WHERE Company_Name = p_company_name AND Is_Current = TRUE AND DB_Is_Deleted = FALSE) THEN
	    
				IF p_update THEN
			      -- Update existing record
			      UPDATE Mgmt.Organisation
			      SET Is_Current = FALSE,
			          Updated_Date = NOW(),
			          Updated_by_User_ID = v_user_id,
			          DB_Last_Updated_Date = NOW(),
			          DB_Last_Updated_By = Current_User
			      WHERE Company_Name = p_company_name AND Is_Current = TRUE AND DB_Is_Deleted = FALSE;
			
			      INSERT INTO Mgmt.Organisation (
			        Company_Name,
			        Company_Identifier,
			        Parent_Organisation_ID,
			        Inherit_Flg,
			        Created_By_User_ID)
			      VALUES (
			        p_company_name,
			        p_company_identifier,
			        v_parent_organisation_id,
			        p_inherit_flg,
			        v_user_id
			      );
			    ELSE
			      RAISE NOTICE 'Company % already exists and update is set to FALSE.', p_company_name;
			    END IF;
		
		ELSE
		    -- Insert new record
		    INSERT INTO Mgmt.Organisation (
		      Company_Name,
		      Company_Identifier,
		      Parent_Organisation_ID,
		      Inherit_Flg,
		      Created_By_User_ID	    )
		    VALUES (
		      p_company_name,
		      p_company_identifier,
		      v_parent_organisation_id,
		      p_inherit_flg,
		      v_user_id	    );
	 	END IF;
	END;
$BODY$
;






















/* Create App_User Table */


CREATE TABLE Mgmt.App_User
(
  App_User_ID bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  User_Name varchar(255) DEFAULT 'MISSING' NOT NULL,
  User_Email varchar(255) DEFAULT 'MISSING' NOT NULL,
  User_Created_Date timestamp DEFAULT NOW() NOT NULL,
  User_Modified_Date timestamp DEFAULT NOW() NOT NULL,
  User_Last_Access_Date timestamp DEFAULT '1999-01-01 00:00:01.000' NULL,
  User_Cred_SO varchar(255) DEFAULT 'MISSING',
  User_Password varchar(768),
  Login_Allowed boolean DEFAULT True,
  Last_Modified_By bigint DEFAULT 1 NOT NULL,
  Is_Current boolean DEFAULT True ,
  DB_Created_Date     	TIMESTAMP WITH TIME ZONE  NULL  DEFAULT  NOW(),
  DB_Created_By        	VARCHAR(255)              NULL	DEFAULT  Current_User,
  DB_Is_Deleted         BOOLEAN                   NULL 	DEFAULT  FALSE,
  DB_Last_Updated_Date  TIMESTAMP WITH TIME ZONE  NULL 	DEFAULT  NOW(),
  DB_Last_Updated_By   	VARCHAR(255)              NULL 	DEFAULT  Current_User,
  Constraint "App_User_ID" PRIMARY KEY (App_User_ID)
)
;


COMMENT ON COLUMN Mgmt.App_User.User_Cred_SO IS E'Used to hold secondary credential ID (but not password) for a secret manager / SSO provider.';
COMMENT ON COLUMN Mgmt.App_User.User_Password IS E'NOT IN USE\nPlaceholder for user passwords if not managed at DB level. Passwords should be salted and hashed on entry.';
COMMENT ON COLUMN Mgmt.App_User.Login_Allowed IS E'NOT IN USE\nCould be used to prevent user login without removing from system. Never remove user ids';
COMMENT ON COLUMN Mgmt.App_User.Last_Modified_By IS E'Captures Users acting on other User accounts - e.g. administrators';

CREATE UNIQUE INDEX IX_User_Name_Current on Mgmt.App_User (User_Name) WHERE Is_Current = TRUE;

/* Insert Skeleton Admin User */
INSERT INTO Mgmt.App_User	user_name) 
VALUES ('Administrator1');

/* Add Organisation <-> App_User FKs */

ALTER TABLE Mgmt.Organisation ADD CONSTRAINT FK_Organisation__App_User
  FOREIGN KEY (Created_By_User_ID) REFERENCES Mgmt.App_User (App_User_ID);

ALTER TABLE Mgmt.Organisation ADD CONSTRAINT FK_Organisation__App_User2
  FOREIGN KEY (Updated_by_User_ID) REFERENCES Mgmt.App_User (App_User_ID);









